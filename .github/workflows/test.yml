name: Kind kubernetes Project

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    #runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'

      - name: Print SSH details
        run: |
          echo "SSH Server running on port 22"
          echo "Password: $(openssl rand -base64 12)" # Note: You should capture this password and use it to connect
          echo "Use SSH to connect: ssh root@$(curl ifconfig.me) -p 22"

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1

      - name: Create Kubernetes Cluster
        run: |
          kind create cluster --config kind-cluster.yaml
          kubectl get nodes

      - name: Set up docker image and load to kind
        run: |
          sh  ./scripts/image.sh
          docker images
          kind load docker-image http-echo:local --name kind            
      
      - name: Deploying Nginix Ingress Controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm install ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace
          kubectl get svc -n ingress-nginx
          

      
      - name: Deploying Foo/Bar Services
        run: |
          kubectl apply -f ./deployment/foo-deployment.yaml
          kubectl apply -f ./deployment/bar-deployment.yaml
          kubectl apply -f ./services/foo-service.yaml
          kubectl apply -f ./services/bar-service.yaml
          kubectl rollout status deployment.apps/foo
          kubectl rollout status deployment.apps/bar
          kubectl get pods
          kubectl get svc
      
      # - name: Deploying Ingress Service
      #   run: | 
      #     netstat -lan | grep 443
      #     telnet ingress-nginx-controller-admission.ingress-nginx.svc 443
      #     kubectl cluster-info --context kind-kind
      #     kubectl apply --dry-run=client -f ./ingress/ingress.yaml

      # - name: Get API server logs
      #   run: |
      #     kubectl logs -n kube-system -l component=kube-apiserver

      # - name: Get API server logs
      #   run: |
      #     kubectl logs -n kube-system -l component=kube-apiserver

      # - name: Wait for cluster to be ready
      #   run: kubectl wait --for=condition=Ready node --all --timeout=90s

      # - name: Set kubectl context
      #   run: |
      #     kubectl cluster-info --context kind-kind
      #     kubectl get validatingwebhookconfigurations 

      - name: Deploy Ingress manifest
        run: |
          kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission
          kubectl apply -f ingress/ingress.yaml

      - name: Check Ingress resources
        run: |
          kubectl get ingress --all-namespaces
          kubectl describe ingress --all-namespaces

      - name: Check services
        run: kubectl get svc --all-namespaces

      - name: Check Ingress controller pods
        run: kubectl get pods -n kube-system

      - name: Verify Ingress deployment
        run: |
          kubectl get ingress --all-namespaces
          kubectl describe ingress --all-namespaces
      # - name: Generate Load and Capture Results
      #   run: |
      #     curl -LO https://github.com/rakyll/hey/releases/download/v0.1.1/hey_linux_amd64
      #     chmod +x hey_linux_amd64
      #     ./hey_linux_amd64 -z 30s -c 10 http://bar.localhost
      #     ./hey_linux_amd64 -z 30s -c 10 http://foo.localhost
      - name: Download k6 binary
        run: |
          curl -sL https://dl.k6.io/releases/k6-v0.37.1-linux-amd64.tar.gz -o k6.tar.gz

      - name: Verify file
        run: |
          file k6.tar.gz

      - name: Extract k6 binary
        run: |
          tar -xzf k6.tar.gz
          sudo mv k6-v0.37.1-linux-amd64/k6 /usr/local/bin/

      - name: Run load test
        run: |
          k6 run ./scripts/load-test.js

      - name: Upload load testing results
        uses: actions/upload-artifact@v3
        with:
          name: k6-results
          path: ./scripts/results.json